{"version":3,"sources":["components/Scorepad.styles.tsx","components/PlayerRound.styles.tsx","components/PlayerRound.tsx","components/PlayerColumn.styles.tsx","components/PlayerColumn.tsx","components/Scorepad.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PadGrid","styled","div","props","playerCount","RoundNumber","roundNumber","BidBox","playerIndex","GotBox","ScoreBox","parseInput","input","parsed","parseInt","isNaN","PlayerRound","runningScore","onScoreChange","useState","bid","updateBid","got","updateGot","score","updateScore","useEffect","diff","Math","abs","onChange","event","target","value","html","toString","PlayerName","PlayerTotal","PlayerColumn","playerName","updatePlayerName","Array","fill","roundScores","updateRoundScores","rows","i","push","slice","rounds","Scorepad","updatePlayerCount","PlayerCols","map","round","idx","onClick","max","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+oBAEO,IAAMA,EAAUC,IAAOC,IAAV,KAEO,SAAAC,GAAK,6BACQ,EAApBA,EAAMC,YADM,cAKnBC,EAAcJ,IAAOC,IAAV,KAEV,SAAAC,GAAK,gBAA2B,EAApBA,EAAMG,YAAkB,EAA/B,gB,6jBCTZ,IAAMC,EAASN,IAAOC,IAAV,KACF,SAAAC,GAAK,gBAA2B,EAApBA,EAAMK,YAAkB,EAA/B,gBACR,SAAAL,GAAK,gBAA2B,EAApBA,EAAMG,YAAkB,EAA/B,gBAMNG,EAASR,IAAOC,IAAV,KACF,SAAAC,GAAK,gBAA2B,EAApBA,EAAMK,YAAkB,EAA/B,gBACR,SAAAL,GAAK,gBAA2B,EAApBA,EAAMG,YAAkB,EAA/B,gBAMNI,EAAWT,IAAOC,IAAV,KAIJ,SAAAC,GAAK,gBAA2B,EAApBA,EAAMK,YAAkB,EAA/B,gBACR,SAAAL,GAAK,gBAA2B,EAApBA,EAAMG,YAAkB,EAA/B,gB,gBCZbK,EAAa,SAACC,GAClB,IAAMC,EAASC,SAASF,EAAO,IAC/B,OAAOG,MAAMF,GAAU,KAAOA,GAGnBG,EAAc,SAACb,GAAkB,IAAD,IACnCK,EAA0DL,EAA1DK,YAAaF,EAA6CH,EAA7CG,YAAaW,EAAgCd,EAAhCc,aAAcC,EAAkBf,EAAlBe,cADL,EAElBC,mBAAwB,MAFN,mBAEpCC,EAFoC,KAE/BC,EAF+B,OAGlBF,mBAAwB,MAHN,mBAGpCG,EAHoC,KAG/BC,EAH+B,OAIdJ,mBAAwB,MAJV,mBAIpCK,EAJoC,KAI7BC,EAJ6B,KAqB3C,OAfAC,qBAAU,WACR,GAAY,OAARN,GAAwB,OAARE,EACJ,OAAVE,IACFC,EAAY,MACZP,EAAc,YAEX,GAAIE,IAAQE,EAAK,CACtB,IAAMK,EAAOC,KAAKC,IAAIT,EAAME,GAC5BG,GAAY,EAAQE,GACpBT,GAAc,EAAQS,QACbP,IAAQE,IACjBG,EAAY,EAAIL,GAChBF,EAAc,EAAIE,MAEnB,CAACA,EAAKE,EAAKE,EAAOP,IAEnB,oCACE,kBAACV,EAAD,CAAQC,YAAaA,EAAaF,YAAaA,GAC7C,kBAAC,IAAD,CACEwB,SAAU,SAACC,GAAD,OAAgBV,EAAUV,EAAWoB,EAAMC,OAAOC,SAC5DC,KAAI,iBAAEd,QAAF,IAAEA,OAAF,EAAEA,EAAKe,kBAAP,QAAqB,MAG7B,kBAAC1B,EAAD,CAAQD,YAAaA,EAAaF,YAAaA,GAC7C,kBAAC,IAAD,CACEwB,SAAU,SAACC,GAAD,OAAgBR,EAAUZ,EAAWoB,EAAMC,OAAOC,SAC5DC,KAAI,iBAAEZ,QAAF,IAAEA,OAAF,EAAEA,EAAKa,kBAAP,QAAqB,MAG7B,kBAACzB,EAAD,CAAUF,YAAaA,EAAaF,YAAaA,GACpC,OAAVkB,GAAmC,OAAjBP,EAAwBO,EAAQP,EAAe,M,maClDnE,IAAMmB,EAAanC,IAAOC,IAAV,KACN,SAAAC,GAAK,gBAA2B,EAApBA,EAAMK,YAAkB,EAA/B,gBAOT6B,EAAcpC,IAAOC,IAAV,KACP,SAAAC,GAAK,gBAA2B,EAApBA,EAAMK,YAAkB,EAA/B,gBCFT8B,EAAe,SAACnC,GAO3B,IAP6C,IAAD,EACLgB,mBAAS,IADJ,mBACrCoB,EADqC,KACzBC,EADyB,OAEHrB,mBACvCsB,MAAM,IAAIC,KAAK,OAH2B,mBAErCC,EAFqC,KAExBC,EAFwB,KAKxCC,EAAO,GACP5B,EAA8B,EANU,WAOnC6B,GACPD,EAAKE,KACH,kBAAC,EAAD,CACEvC,YAAaL,EAAMK,YACnBF,YAAawC,EACb7B,aAAcA,EACdC,cAAe,SAAAM,GACboB,EAAkB,GAAD,mBACZD,EAAYK,MAAM,EAAGF,IADT,CAEftB,GAFe,YAGZmB,EAAYK,MAAMF,EAAI,UAKjC7B,EACmB,OAAjBA,GAA4C,OAAnB0B,EAAYG,GACjC7B,EAAe0B,EAAYG,GAC3B,MAlBCA,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAqBT,OACE,oCACE,kBAACV,EAAD,CAAY5B,YAAaL,EAAMK,aAC7B,kBAAC,IAAD,CACE0B,KAAMK,EACNT,SAAU,SAAAC,GAAK,OAAIS,EAAiBT,EAAMC,OAAOC,WAGpDY,EACD,kBAACR,EAAD,CAAa7B,YAAaL,EAAMK,aAAcS,KCzC9CgC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAEvCC,EAAW,WAGtB,IAH6B,IAAD,EACa/B,mBAAS,GADtB,mBACrBf,EADqB,KACR+C,EADQ,KAEtBC,EAAa,GACVN,EAAI,EAAGA,EAAI1C,EAAa0C,IAC/BM,EAAWL,KAAK,kBAAC,EAAD,CAAcvC,YAAasC,KAE7C,OACE,oCACE,kBAAC9C,EAAD,CAASI,YAAaA,GACnB6C,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAClD,EAAD,CAAaC,YAAaiD,GAAMD,MAEjCF,GAEH,6BACE,4BAAQI,QAAS,kBAAML,EAAkB/C,EAAc,KAAvD,cAGA,4BAAQoD,QAAS,kBAAML,EAAkBvB,KAAK6B,IAAIrD,EAAc,EAAG,MAAnE,oBCdOsD,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c21ac3b.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const PadGrid = styled.div<{ playerCount: number }>`\n  display: grid;\n  grid-template-columns: ${props =>\n    `40px repeat( ${props.playerCount * 3}, 30px)`};\n  grid-template-rows: 40px repeat(26, 30px) 40px;\n`\n\nexport const RoundNumber = styled.div<{ roundNumber: number }>`\n  grid-column: '1 / span 1';\n  grid-row: ${props => `${props.roundNumber * 2 + 2} / span 2`};\n  line-height: '40px';\n  font-weight: bold;\n  line-height: 60px;\n  text-align: center;\n  border: 1px solid #000;\n  border-left: none;\n`\n","import styled from 'styled-components'\n\nexport const BidBox = styled.div<{ playerIndex: number; roundNumber: number }>`\n  grid-column: ${props => `${props.playerIndex * 3 + 2} / span 1`};\n  grid-row: ${props => `${props.roundNumber * 2 + 2} / span 1`};\n  line-height: 30px;\n  text-align: center;\n  border: 1px solid #000;\n`\n\nexport const GotBox = styled.div<{ playerIndex: number; roundNumber: number }>`\n  grid-column: ${props => `${props.playerIndex * 3 + 2} / span 1`};\n  grid-row: ${props => `${props.roundNumber * 2 + 3} / span 1`};\n  line-height: 30px;\n  text-align: center;\n  border: 1px solid #000;\n`\n\nexport const ScoreBox = styled.div<{\n  playerIndex: number\n  roundNumber: number\n}>`\n  grid-column: ${props => `${props.playerIndex * 3 + 3} / span 2`};\n  grid-row: ${props => `${props.roundNumber * 2 + 2} / span 2`};\n  line-height: 60px;\n  text-align: center;\n  border: 1px solid #000;\n  font-size: 20px;\n`\n","import React, { useState, useEffect } from 'react'\nimport { BidBox, GotBox, ScoreBox } from './PlayerRound.styles'\nimport ContentEditable from 'react-contenteditable'\n\ninterface Props {\n  playerIndex: number\n  roundNumber: number\n  runningScore: number | null\n  onScoreChange: (score: number | null) => void\n}\n\nconst parseInput = (input: string): number | null => {\n  const parsed = parseInt(input, 10)\n  return isNaN(parsed) ? null : parsed\n}\n\nexport const PlayerRound = (props: Props) => {\n  const { playerIndex, roundNumber, runningScore, onScoreChange } = props\n  const [bid, updateBid] = useState<null | number>(null)\n  const [got, updateGot] = useState<null | number>(null)\n  const [score, updateScore] = useState<null | number>(null)\n\n  useEffect(() => {\n    if (bid === null || got === null) {\n      if (score !== null) {\n        updateScore(null)\n        onScoreChange(null)\n      }\n    } else if (bid !== got) {\n      const diff = Math.abs(bid - got)\n      updateScore(0 - 5 - diff)\n      onScoreChange(0 - 5 - diff)\n    } else if (bid === got) {\n      updateScore(5 + bid)\n      onScoreChange(5 + bid)\n    }\n  }, [bid, got, score, runningScore])\n  return (\n    <>\n      <BidBox playerIndex={playerIndex} roundNumber={roundNumber}>\n        <ContentEditable\n          onChange={(event: any) => updateBid(parseInput(event.target.value))}\n          html={bid?.toString() ?? ''}\n        />\n      </BidBox>\n      <GotBox playerIndex={playerIndex} roundNumber={roundNumber}>\n        <ContentEditable\n          onChange={(event: any) => updateGot(parseInput(event.target.value))}\n          html={got?.toString() ?? ''}\n        />\n      </GotBox>\n      <ScoreBox playerIndex={playerIndex} roundNumber={roundNumber}>\n        {score !== null && runningScore !== null ? score + runningScore : ''}\n      </ScoreBox>\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nexport const PlayerName = styled.div<{ playerIndex: number }>`\n  grid-column: ${props => `${props.playerIndex * 3 + 2} / span 3`};\n  grid-row: 1 / span 1;\n  text-align: center;\n  line-height: 40px;\n  font-size: 20px;\n  border: 1px solid #000;\n`\nexport const PlayerTotal = styled.div<{ playerIndex: number }>`\n  grid-column: ${props => `${props.playerIndex * 3 + 2} / span 3`};\n  grid-row: 28 / span 1;\n  text-align: center;\n  line-height: 40px;\n  font-size: 20px;\n  border: 1px solid #000;\n`\n","import React, { useState } from 'react'\nimport { PlayerRound } from './PlayerRound'\nimport { PlayerName, PlayerTotal } from './PlayerColumn.styles'\nimport ContentEditable from 'react-contenteditable'\n\ninterface Props {\n  playerIndex: number\n}\n\nexport const PlayerColumn = (props: Props) => {\n  const [playerName, updatePlayerName] = useState('')\n  const [roundScores, updateRoundScores] = useState<(number | null)[]>(\n    Array(13).fill(null),\n  )\n  let rows = []\n  let runningScore: number | null = 0\n  for (let i = 0; i < 13; i++) {\n    rows.push(\n      <PlayerRound\n        playerIndex={props.playerIndex}\n        roundNumber={i}\n        runningScore={runningScore}\n        onScoreChange={score => {\n          updateRoundScores([\n            ...roundScores.slice(0, i),\n            score,\n            ...roundScores.slice(i + 1),\n          ])\n        }}\n      />,\n    )\n    runningScore =\n      runningScore !== null && roundScores[i] !== null\n        ? runningScore + roundScores[i]!\n        : null\n  }\n\n  return (\n    <>\n      <PlayerName playerIndex={props.playerIndex}>\n        <ContentEditable\n          html={playerName}\n          onChange={event => updatePlayerName(event.target.value)}\n        />\n      </PlayerName>\n      {rows}\n      <PlayerTotal playerIndex={props.playerIndex}>{runningScore}</PlayerTotal>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { PlayerNames } from './PlayerNames'\nimport { PadGrid, RoundNumber } from './Scorepad.styles'\nimport { PlayerColumn } from './PlayerColumn'\n\nconst rounds = [7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7]\n\nexport const Scorepad = () => {\n  const [playerCount, updatePlayerCount] = useState(4)\n  const PlayerCols = []\n  for (let i = 0; i < playerCount; i++) {\n    PlayerCols.push(<PlayerColumn playerIndex={i} />)\n  }\n  return (\n    <>\n      <PadGrid playerCount={playerCount}>\n        {rounds.map((round, idx) => (\n          <RoundNumber roundNumber={idx}>{round}</RoundNumber>\n        ))}\n        {PlayerCols}\n      </PadGrid>\n      <div>\n        <button onClick={() => updatePlayerCount(playerCount + 1)}>\n          Add Player\n        </button>\n        <button onClick={() => updatePlayerCount(Math.max(playerCount - 1, 0))}>\n          Remove Player\n        </button>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport { Scorepad } from './components/Scorepad'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scorepad />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}