{"version":3,"sources":["components/PlayerNames.styles.tsx","components/PlayerNames.tsx","components/PlayerRow.styles.tsx","components/PlayerRound.styles.tsx","components/PlayerRound.tsx","components/PlayerRow.tsx","components/PlayerRows.tsx","components/Scorepad.styles.tsx","components/CardRow.styles.tsx","components/CardRow.tsx","components/Scorepad.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SideBar","styled","div","Name","AddPlayer","button","PlayerNames","playerCount","updatePlayerCount","useState","playerNames","updatePlayerNames","useEffect","length","slice","map","name","idx","key","html","onChange","event","target","value","onClick","PlayerRowStyled","PlayerRoundStyled","PlayerRaw","PlayerBid","PlayerGot","PlayerTotal","UnstyledInput","input","parseInput","parsed","parseInt","isNaN","PlayerRound","props","runningScore","onScoreChange","bid","updateBid","got","updateGot","score","updateScore","diff","Math","abs","toString","type","PlayerRow","Array","fill","roundScores","updateRoundScores","rounds","useMemo","runningTotal","i","push","visibleRounds","PlayerRows","playerRows","Wrapper","SideBarWrapper","NextRound","ScoreWrapper","Scores","CardRow","CardCount","lastRef","useRef","visible","round","ref","current","scrollIntoView","id","Scorepad","updateVisibleRounds","min","count","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.be7b5cea.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const SideBar = styled.div`\n  display: inline-flex;\n  flex-direction: column;\n  color: #000;\n  flex-shrink: 0;\n  z-index: 10;\n  background: #fff;\n`\n\nexport const Name = styled.div`\n  height: 50px;\n  line-height: 50px;\n  padding: 0 15px;\n  text-align: right;\n  font-weight: bold;\n  border-bottom: 3px solid #dee2e6;\n  border-right: 3px solid #dee2e6;\n`\nexport const AddPlayer = styled.button`\n  background: #5c6bc0;\n  color: #fff;\n  border: none;\n  margin: 10px 0;\n  padding: 10px;\n`\n","import React, { useState, useEffect } from 'react'\nimport { SideBar, Name, AddPlayer } from './PlayerNames.styles'\nimport ContentEditable from 'react-contenteditable'\nimport { FiPlusCircle } from 'react-icons/fi'\n\ninterface Props {\n  playerCount: number\n  updatePlayerCount: (count: number) => void\n}\n\nexport const PlayerNames = ({ playerCount, updatePlayerCount }: Props) => {\n  const [playerNames, updatePlayerNames] = useState<string[]>([])\n  useEffect(() => {\n    if (playerCount > playerNames.length) {\n      updatePlayerNames([...playerNames, `Player ${playerNames.length + 1}`])\n    } else if (playerCount < playerNames.length) {\n      updatePlayerNames(playerNames.slice(0, -1))\n    }\n  }, [playerCount, playerNames])\n  return (\n    <SideBar>\n      {playerNames.map((name, idx) => (\n        <Name key={idx}>\n          <ContentEditable\n            html={name}\n            onChange={event => {\n              updatePlayerNames([\n                ...playerNames.slice(0, idx),\n                event.target.value,\n                ...playerNames.slice(idx + 1),\n              ])\n            }}\n          />\n        </Name>\n      ))}\n      {playerCount < 7 && (\n        <AddPlayer onClick={() => updatePlayerCount(playerCount + 1)}>\n          <FiPlusCircle />\n          Add Player\n        </AddPlayer>\n      )}\n    </SideBar>\n  )\n}\n","import styled from 'styled-components'\n\nexport const PlayerRowStyled = styled.div`\n  display: flex;\n  height: 50px;\n  width: auto;\n  background: #fff;\n  color: #000;\n  border-bottom: 3px solid #dee2e6;\n  z-index: 0;\n`\n","import styled from 'styled-components'\n\nexport const PlayerRoundStyled = styled.div`\n  width: 100px;\n  flex-shrink: 0;\n  text-align: center;\n  display: flex;\n  border-right: 3px solid #dee2e6;\n`\nexport const PlayerRaw = styled.div`\n  flex: 1 0 50%;\n  height: 50px;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid #dee2e6;\n  justify-content: center;\n`\n\nexport const PlayerBid = styled.div`\n  flex: 1 0 auto;\n  border-bottom: 1px solid #dee2e6;\n  align-items: center;\n  display: flex;\n  & > div {\n    flex: 1 0 auto;\n  }\n`\n\nexport const PlayerGot = styled.div`\n  flex: 1 0 auto;\n  display: flex;\n  align-items: center;\n  & > div {\n    flex: 1 0 auto;\n  }\n`\n\nexport const PlayerTotal = styled.div`\n  flex: 1 0 50%;\n  display: flex;\n  align-items: center;\n  & > div {\n    flex: 1 0 auto;\n  }\n`\nexport const UnstyledInput = styled.input`\n  background-color: transparent;\n  border-radius: 0px;\n  border: none;\n  display: block;\n  padding: 0px;\n  text-align: center;\n  font: inherit;\n  width: 100%;\n`\n","import React, { useState, useEffect } from 'react'\nimport {\n  PlayerRoundStyled,\n  PlayerRaw,\n  PlayerBid,\n  PlayerGot,\n  PlayerTotal,\n  UnstyledInput,\n} from './PlayerRound.styles'\n\ninterface Props {\n  runningScore: number | null\n  onScoreChange: (score: number) => void\n}\n\nconst parseInput = (input: string): number | null => {\n  const parsed = parseInt(input, 10)\n  return isNaN(parsed) ? 0 : parsed\n}\n\nexport const PlayerRound = (props: Props) => {\n  const { runningScore, onScoreChange } = props\n  const [bid, updateBid] = useState<null | number>(null)\n  const [got, updateGot] = useState<null | number>(null)\n  const [score, updateScore] = useState<null | number>(null)\n\n  useEffect(() => {\n    if (bid === null || got === null) {\n      if (score !== null) {\n        updateScore(null)\n      }\n    } else if (bid !== got) {\n      const diff = Math.abs(bid - got)\n      updateScore(0 - 5 - diff)\n      onScoreChange(0 - 5 - diff)\n    } else if (bid === got) {\n      updateScore(5 + bid)\n      onScoreChange(5 + bid)\n    }\n  }, [bid, got, score, runningScore, onScoreChange])\n  return (\n    <PlayerRoundStyled>\n      <PlayerRaw>\n        <PlayerBid>\n          <UnstyledInput\n            onChange={(event: any) => updateBid(parseInput(event.target.value))}\n            value={bid?.toString() ?? ''}\n            type=\"number\"\n          />\n        </PlayerBid>\n        <PlayerGot>\n          <UnstyledInput\n            onChange={(event: any) => updateGot(parseInput(event.target.value))}\n            value={got?.toString() ?? ''}\n            type=\"number\"\n          />\n        </PlayerGot>\n      </PlayerRaw>\n      <PlayerTotal>\n        <div>\n          {score !== null && runningScore !== null ? score + runningScore : ''}\n        </div>\n      </PlayerTotal>\n    </PlayerRoundStyled>\n  )\n}\n","import React, { useState, useMemo } from 'react'\nimport { PlayerRowStyled } from './PlayerRow.styles'\nimport { PlayerRound } from './PlayerRound'\n\ninterface Props {\n  visibleRounds: number\n}\n\nexport const PlayerRow = (props: Props) => {\n  const [roundScores, updateRoundScores] = useState(Array(13).fill(null))\n  const rounds = useMemo(() => {\n    const rounds = []\n    let runningTotal: number | null = 0\n    for (let i = 0; i < props.visibleRounds; i++) {\n      rounds.push(\n        <PlayerRound\n          key={i}\n          runningScore={runningTotal}\n          onScoreChange={score =>\n            updateRoundScores([\n              ...roundScores.slice(0, i),\n              score,\n              ...roundScores.slice(i + 1),\n            ])\n          }\n        />,\n      )\n      runningTotal =\n        runningTotal !== null && roundScores[i] !== null\n          ? runningTotal + roundScores[i]\n          : null\n    }\n    return rounds\n  }, [props.visibleRounds, roundScores])\n\n  return <PlayerRowStyled>{rounds}</PlayerRowStyled>\n}\n","import React from 'react'\nimport { PlayerRow } from './PlayerRow'\n\ninterface Props {\n  playerCount: number\n  visibleRounds: number\n}\n\nexport const PlayerRows = (props: Props) => {\n  const playerRows = []\n  for (let i = 0; i < props.playerCount; i++) {\n    playerRows.push(<PlayerRow key={i} visibleRounds={props.visibleRounds} />)\n  }\n  return <>{playerRows}</>\n}\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  max-width: 100vw;\n`\n\nexport const SideBarWrapper = styled.div`\n  flex-shrink: 0;\n  background: #5c6bc0;\n`\n\nexport const NextRound = styled.div`\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: #fff;\n  font-size: 1.2em;\n`\n\nexport const ScoreWrapper = styled.div`\n  overflow: auto;\n`\n\nexport const Scores = styled.div`\n  display: inline-block;\n`\n","import styled from 'styled-components'\n\nexport const CardRow = styled.div`\n  display: flex;\n  height: 50px;\n  width: auto;\n  background: #5c6bc0;\n  color: #fff;\n`\n\nexport const CardCount = styled.div`\n  width: 100px;\n  flex-shrink: 0;\n  line-height: 50px;\n  text-align: center;\n  border-right: 3px solid #fff;\n  font-weight: bold;\n  &:last-child {\n    border-right: none;\n    padding-right: 3px;\n  }\n`\n","import React, { useMemo, useEffect, useRef } from 'react'\nimport { CardRow as CardRowStyled, CardCount } from './CardRow.styles'\n\ninterface Props {\n  visibleRounds: number\n}\n\nconst rounds = [7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5, 6, 7]\n\nexport const CardRow = (props: Props) => {\n  const lastRef = useRef<HTMLDivElement>(null)\n  const visible = useMemo(() => {\n    return rounds.slice(0, props.visibleRounds).map((round, idx) => {\n      return (\n        <CardCount\n          key={idx}\n          ref={idx === props.visibleRounds - 1 ? lastRef : null}\n        >\n          {round}\n        </CardCount>\n      )\n    })\n  }, [props.visibleRounds, lastRef])\n\n  useEffect(() => {\n    if (lastRef && lastRef.current) {\n      lastRef.current.scrollIntoView()\n    }\n  }, [lastRef, props.visibleRounds])\n\n  return <CardRowStyled id=\"CardRow\">{visible}</CardRowStyled>\n}\n","import React, { useState } from 'react'\nimport { PlayerNames } from './PlayerNames'\nimport { PlayerRows } from './PlayerRows'\nimport {\n  Wrapper,\n  ScoreWrapper,\n  Scores,\n  SideBarWrapper,\n  NextRound,\n} from './Scorepad.styles'\nimport { CardRow } from './CardRow'\nimport { FiArrowRight } from 'react-icons/fi'\n\nexport const Scorepad = () => {\n  const [playerCount, updatePlayerCount] = useState(4)\n  const [visibleRounds, updateVisibleRounds] = useState(3)\n\n  return (\n    <Wrapper>\n      <SideBarWrapper>\n        <NextRound>\n          {visibleRounds < 13 && (\n            <FiArrowRight\n              onClick={() =>\n                updateVisibleRounds(Math.min(visibleRounds + 1, 13))\n              }\n            />\n          )}\n        </NextRound>\n\n        <PlayerNames\n          playerCount={playerCount}\n          updatePlayerCount={(count: number) => updatePlayerCount(count)}\n        />\n      </SideBarWrapper>\n      <ScoreWrapper>\n        <Scores>\n          <CardRow visibleRounds={visibleRounds} />\n          <PlayerRows visibleRounds={visibleRounds} playerCount={playerCount} />\n        </Scores>\n      </ScoreWrapper>\n    </Wrapper>\n  )\n}\n","import React from 'react'\nimport { Scorepad } from './components/Scorepad'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Scorepad />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}